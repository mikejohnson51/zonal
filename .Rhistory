# rcompendium::add_dependencies_badge()
# rcompendium::add_r_depend()
knitr::knit("README.Rmd")
library(knitr)
fs::file_copy("to_build/01_weight_creation.Rmd", 'vignettes/01_weight_creation.Rmd.orig', overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
library(exactextractr)
fs::file_copy("to_build/01_weight_creation.Rmd", 'vignettes/01_weight_creation.Rmd.orig', overwrite = TRUE)
fs::file_copy("to_build/01_weight_creation.Rmd", 'vignettes/01_weight_creation.Rmd.orig', overwrite = TRUE)
getwd()
fs::file_copy("to_build/01_weight_creation.Rmd",
'vignettes/01_weight_creation.Rmd.orig',
overwrite = TRUE)
getwd()
fs::file_copy("../to_build/01_weight_creation.Rmd",
'01_weight_creation.Rmd.orig',
overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
library(knitr)
fs::file_copy("../to_build/01_weight_creation.Rmd",
'01_weight_creation.Rmd.orig',
overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
getwd()
getwd()
devtools::load_all("~/github/zonal")
getwd()
devtools::load_all("~/github/zonal")
getwd()
getwd()
library(knitr)
fs::file_copy("to_build/01_weight_creation.Rmd",
'vignettes/01_weight_creation.Rmd.orig',
overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
library(intersectr)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
library(knitr)
fs::file_copy("to_build/01_weight_creation.Rmd",
'vignettes/01_weight_creation.Rmd.orig',
overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
getwd()
setwd("/Users/mjohnson/github/zonal/")
fs::file_copy("to_build/01_weight_creation.Rmd",
'vignettes/01_weight_creation.Rmd.orig',
overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
knit("to_build/01_weight_creation.Rmd", "vignettes/01_weight_creation.Rmd")
files = list.files(".", ".png", full.names = TRUE)
files
fs::file_move(files, paste0('vignettes/', basename(files)))
knit("vignettes/02_intersections.Rmd", "vignettes/02_intersections.Rmd")
knit("to_build/02_intersections.Rmd", "vignettes/02_intersections.Rmd")
knit("to_build/02_intersections.Rmd", "vignettes/02_intersections.Rmd")
library(dplyr)
library(dplyr)
library(data.table)
library(dplyr)
library(data.table)
library(RNetCDF)
library(sf)
library(ncmeta)
library(intersectr)
library(zonal)
library(terra)
library(ggplot2)
knitr::opts_chunk$set(
out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "i-",
message = FALSE, warning = FALSE, error = FALSE
)
intersectr_prep = function(file, geom, ID, variable){
nc_coord_vars <- nc_coord_var(file)
nc_coord_vars <- filter(nc_coord_vars, variable == !!variable)
nc       <- open.nc(file)
X_coords <- var.get.nc(nc, nc_coord_vars$X, unpack = TRUE)
Y_coords <- var.get.nc(nc, nc_coord_vars$Y, unpack = TRUE)
nc_prj <- nc_gm_to_prj(nc_grid_mapping_atts(file))
cell_geometry = create_cell_geometry(X_coords = X_coords,
Y_coords = Y_coords,
prj = nc_prj,
geom = geom,
buffer_dist = 0.1, # Degrees
regularize = TRUE)
data_source_cells <- st_sf(dplyr::select(cell_geometry, grid_ids))
target_polygons   <- st_sf(dplyr::select(geom, !!ID))
st_agr(data_source_cells) <- "constant"
st_agr(target_polygons)   <- "constant"
area_weights = calculate_area_intersection_weights(data_source_cells, target_polygons, allow_lonlat = TRUE)
return(list(grid = cell_geometry, w = area_weights, x = nc_coord_vars$X, y = nc_coord_vars$Y, t = nc_coord_vars$T))
}
intersectr_prep
exactrextract_process = function(file, geom, ID){
R.utils::withTimeout(
exactextractr::exact_extract(raster::stack(file),
geom,
stack_apply = TRUE,
fun = "mean",
append_cols = ID,
progress = FALSE),
timeout = 180, onTimeout = "silent")
}
library(zonal)
file = 'pet_2020.nc'
(s = terra::rast(file))
geom <- read_sf('ngen_01a-4.gpkg', "catchments") %>%
st_make_valid()
glimpse(geom)
int_time_huc01 = system.time({
intersectr_input = intersectr_prep(file, geom, ID = "comid", variable = 'potential_evapotranspiration')
})
huc01_bnch <- bench::mark(
iterations = 1, check = FALSE, time_unit = 's',
intersectr_staged_weights = execute_intersection(nc_file = file,
variable_name = 'potential_evapotranspiration',
intersection_weights = intersectr_input$w,
cell_geometry = intersectr_input$grid,
x_var = intersectr_input$x,
y_var = intersectr_input$y,
t_var = intersectr_input$t,
start_datetime = NULL,
end_datetime = NULL),
exactextractr            = exactrextract_process(file, geom, "comid"),
zonal_full               = execute_zonal(file, geom, "comid"),
zonal_staged_weights     = execute_zonal(file, w = zonal_w)
)
install.packages('R.utils')
huc01_bnch <- bench::mark(
iterations = 1, check = FALSE, time_unit = 's',
intersectr_staged_weights = execute_intersection(nc_file = file,
variable_name = 'potential_evapotranspiration',
intersection_weights = intersectr_input$w,
cell_geometry = intersectr_input$grid,
x_var = intersectr_input$x,
y_var = intersectr_input$y,
t_var = intersectr_input$t,
start_datetime = NULL,
end_datetime = NULL),
exactextractr            = exactrextract_process(file, geom, "comid"),
zonal_full               = execute_zonal(file, geom, "comid"),
zonal_staged_weights     = execute_zonal(file, w = zonal_w)
)
library('ncdf4')
huc01_bnch <- bench::mark(
iterations = 1, check = FALSE, time_unit = 's',
intersectr_staged_weights = execute_intersection(nc_file = file,
variable_name = 'potential_evapotranspiration',
intersection_weights = intersectr_input$w,
cell_geometry = intersectr_input$grid,
x_var = intersectr_input$x,
y_var = intersectr_input$y,
t_var = intersectr_input$t,
start_datetime = NULL,
end_datetime = NULL),
exactextractr            = exactrextract_process(file, geom, "comid"),
zonal_full               = execute_zonal(file, geom, "comid"),
zonal_staged_weights     = execute_zonal(file, w = zonal_w)
)
zonal_time_huc01 = system.time({
zonal_w = weighting_grid(file, geom, ID = "comid")
})
zonal_w
zonal_w
huc01_bnch <- bench::mark(
iterations = 1, check = FALSE, time_unit = 's',
intersectr_staged_weights = execute_intersection(nc_file = file,
variable_name = 'potential_evapotranspiration',
intersection_weights = intersectr_input$w,
cell_geometry = intersectr_input$grid,
x_var = intersectr_input$x,
y_var = intersectr_input$y,
t_var = intersectr_input$t,
start_datetime = NULL,
end_datetime = NULL),
exactextractr            = exactrextract_process(file, geom, "comid"),
zonal_full               = execute_zonal(file, geom, "comid"),
zonal_staged_weights     = execute_zonal(file, w = zonal_w)
)
knit("to_build/02_intersections.Rmd", "vignettes/02_intersections.Rmd")
library(knitr)
setwd("/Users/mjohnson/github/zonal/")
knit("to_build/02_intersections.Rmd", "vignettes/02_intersections.Rmd")
knit("to_build/03_categorical.Rmd", "vignettes/03_categorical.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
devtools::load_all(".")
devtools::load_all(".")
terra::rast('/Users/mjohnson/github/zonal/to_build/soilproperties_CONUS_FullRouting.nc')
t = terra::rast('/Users/mjohnson/github/zonal/to_build/soilproperties_CONUS_FullRouting.nc')
names(t)
geom
geom <- read_sf('ngen_01a-4.gpkg', "catchments") %>%
st_make_valid()
geom <- read_sf('to_build/ngen_01a-4.gpkg', "catchments") %>%
st_make_valid()
library(dplyr)
geom <- read_sf('to_build/ngen_01a-4.gpkg', "catchments") %>%
st_make_valid()
library(sf)
geom <- read_sf('to_build/ngen_01a-4.gpkg', "catchments") %>%
st_make_valid()
file = '/Users/mjohnson/github/zonal/to_build/soilproperties_CONUS_FullRouting.nc'
zonal_w = weighting_grid(file, geom, ID = "comid")
zonal_w
geom
zonal_w = weighting_grid(file, geom, ID = "comid")
file
geom
ID = 'comid'
if(grepl("raster|character", class(file), ignore.case = TRUE)){ file = file[[1]] }
r    = suppressWarnings({ terra::rast(file)[[1]] })
r
raster(file)
raster::raster(file)
library(raster)
raster("to_build/soilproperties_CONUS_FullRouting.nc")
r = raster("to_build/soilproperties_CONUS_FullRouting.nc")
res(r) = c(1000, 1000)
r
library(zonal)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(terra)
library(sf)
library(zonal)
library(paint)
geom <- st_make_valid(read_sf('ngen_01a-4.gpkg', "catchments"))
paint(geom)
(f = rast('soilproperties_CONUS_FullRouting.nc'))
library(wrfhydroSubsetter)
e = make_empty_geogrid_raster('/Volumes/Transcend/nwmCONUS-v216/geo_em_CONUS.nc')
ext(f) = ext(e)
crs(f) = crs(e)
f
w_time = system.time({
zonal_w = weighting_grid(f, geom, ID = "comid")
})
file = f
geom = geom
ID = "comid"
if(grepl("raster|character", class(file), ignore.case = TRUE)){ file = file[[1]] }
r    = suppressWarnings({ terra::rast(file)[[1]] })
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols[]      = (rep(1:y.dim, each = x.dim))
names(cols) = 'Y'
rows[]      = (rep(1:x.dim, times = y.dim))
names(rows) = 'X'
# We are doing this because terra snap out often crashes R!
vect = terra::project(terra::vect(geom), terra::crs(r))
ext  = terra::ext(vect)
res  = terra::res(r)[1]
ext  = c(ext$xmin, ext$xmax, ext$ymin, ext$ymax)
st =  terra::crop(terra::rast(list(cols, rows)), ext, snap = "out")
cells        = st[[1]]
names(cells) = 'grid_id'
cells[] = 1:terra::ncell(cells)
s       = terra::rast(list(st, cells))
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE,
include_cols = ID) })
out2 = data.table::rbindlist(out1)
data.table::setnames(out2, "coverage_fraction", "w")
data.table::setDT(out2, key = "grid_id")
knit("to_build/04_nwm_channel.Rmd", "vignettes/04_nwm_channel.Rmd")
library(knitr)
setwd("/Users/mjohnson/github/zonal/")
knit("to_build/04_nwm_channel.Rmd", "vignettes/04_nwm_channel.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
merge(geom, out, by = "ID")
merge(geom, out, by = "comid")
spat = merge(geom, out, by = "comid")
ggplot() +
geom_sf(data = spat, aes(fill = spat$`bexp_soil_layers_stag=1_Time=1`))
ggplot() +
geom_sf(data = spat, aes(fill = `bexp_soil_layers_stag=1_Time=1`, color = NA))
ggplot() +
geom_sf(data = spat[1:10,], aes(fill = `bexp_soil_layers_stag=1_Time=1`, color = NA))
ggplot() +
geom_sf(data = spat[1:10,], aes(fill = `bexp_soil_layers_stag=1_Time=1`), color = NA)
ggplot() +
geom_sf(data = spat[1:10,], aes(fill = `bexp_soil_layers_stag=1_Time=1`), color = NA) +
scale_color_viridis_c()
ggplot() +
geom_sf(data = spat[1:10,], aes(fill = `bexp_soil_layers_stag=1_Time=1`), color = NA) +
scale_fill_viridis_c()
ggplot() +
geom_sf(data = spat, aes(fill = `bexp_soil_layers_stag=1_Time=1`), color = NA) +
scale_fill_viridis_c()
knit("to_build/04_nwm_channel.Rmd", "vignettes/04_nwm_channel.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
files = list.files("to_build", ".png", full.names = TRUE)
files
knit("to_build/04_nwm_channel.Rmd", "vignettes/04_nwm_channel.Rmd")
files = list.files("to_build", ".png", full.names = TRUE)
files
files = list.files(".", ".png", full.names = TRUE)
files
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
knitr::opts_chunk$set(  out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "nwm-",
message = FALSE, warning = FALSE, error = FALSE)
geom <- st_make_valid(read_sf('/Users/mjohnson/github/hydroresolve/exp/cache/output-06.gpkg', "catchments"))
geom <- read_sf('/Users/mjohnson/github/hydroresolve/exp/cache/output-06.gpkg', "catchments")
library(terra)
library(sf)
library(zonal)
library(paint)
geom <- read_sf('/Users/mjohnson/github/hydroresolve/exp/cache/output-06.gpkg', "catchments")
paint(geom)
(f = rast('soilproperties_CONUS_FullRouting.nc'))
library(wrfhydroSubsetter)
library(wrfhydroSubsetter)
e = make_empty_geogrid_raster('/Volumes/Transcend/nwmCONUS-v216/geo_em_CONUS.nc')
ext(f) = ext(e)
crs(f) = crs(e)
crs(f) = crs(e)
f
w_time = system.time({
zonal_w = weighting_grid(file = f, geom = geom, ID = "comid")
})
geom
zonal_w = weighting_grid(file = f, geom = geom, ID = "ID")
paint(zonal_w)
z_time = system.time({
out = zonal::execute_zonal(f, w = zonal_w)
})
names(out) = c('ID', names(f))
paint(out)
hist(out$`bexp_soil_layers_stag=1_Time=1`)
spat = merge(geom, out, by = "comid")
spat = merge(geom, out, by = "ID")
ggplot() +
geom_sf(data = spat, aes(fill = `bexp_soil_layers_stag=1_Time=1`), color = NA) +
scale_fill_viridis_c()
library(ggplot2)
ggplot() +
geom_sf(data = spat, aes(fill = `bexp_soil_layers_stag=1_Time=1`), color = NA) +
scale_fill_viridis_c()
spat
plot(f[[1]])
crop(f[[1]], geom)
plot(crop(f[[1]]))
plot(f[[1]])
devtools::document()
devtools::load_all()
devtools::check(vignettes = FALSE)
devtools::install_local()
devtools::install_local(force = TRUE)
# rcompendium::add_dependencies()
# rcompendium::add_dependencies_badge()
# rcompendium::add_r_depend()
knitr::knit("README.Rmd")
# rcompendium::add_dependencies()
# rcompendium::add_dependencies_badge()
# rcompendium::add_r_depend()
knitr::knit("README.Rmd")
# rcompendium::add_dependencies()
# rcompendium::add_dependencies_badge()
# rcompendium::add_r_depend()
knitr::knit("README.Rmd")
devtools::document()
devtools::load_all()
devtools::check(vignettes = TRUE)
library(knitr)
devtools::document()
devtools::load_all()
devtools::check(vignettes = FALSE)
knit("to_build/04_nwm_channel.Rmd", "vignettes/04_nwm_channel.Rmd")
knitr::opts_chunk$set(  out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "nwm-",
message = FALSE, warning = FALSE, error = FALSE)
geom <- read_sf('/Users/mjohnson/github/hydroresolve/releases//beta/01a/hydrofabric.gpkg', "catchments")
paint(geom)
knit("to_build/04_nwm_channel.Rmd", "vignettes/04_nwm_channel.Rmd")
files = list.files("to_build", ".png", full.names = TRUE)
files
fs::file_move(files, paste0('vignettes/', basename(files)))
getwd()
fs::copy('/Users/mjohnson/github/hydroresolve/releases//beta/01a/hydrofabric.gpkg',
'to_build/hydrofabric.gpkg')
fs::file_copy('/Users/mjohnson/github/hydroresolve/releases//beta/01a/hydrofabric.gpkg',
'to_build/hydrofabric.gpkg')
getwd()
geom <- st_make_valid(read_sf('hydrofabric.gpkg', "catchments"))
paint(geom)
library(paint)/paint::unmask_print()
knit("to_build/01_weight_creation.Rmd", "vignettes/01_weight_creation.Rmd")
knit("to_build/01_weight_creation.Rmd", "vignettes/01_weight_creation.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
(geom <- read_sf('hydrofabric', "catchments") )
getwd()
setwd("to_build")
(geom <- read_sf('hydrofabric', "catchments"))
(geom <- read_sf('hydrofabric.gpkg', "catchments"))
paint(geom)
library(paint);paint::unmask_print()
(geom <- read_sf('hydrofabric.gpkg', "catchments"))
paint(geom)
knit("to_build/02_intersections.Rmd", "vignettes/02_intersections.Rmd")
setwd("/Users/mjohnson/github/zonal/")
knit("to_build/02_intersections.Rmd", "vignettes/02_intersections.Rmd")
knit("to_build/02_intersections.Rmd", "vignettes/02_intersections.Rmd")
files = list.files(".", ".png", full.names = TRUE)
files
fs::file_move(files, paste0('vignettes/', basename(files)))
library(zonal)
library(ggplot2)
library(dplyr)
library(sf)
library(tidyr)
library(terra)
plot(AOI$geometry, main = paste(nrow(AOI), "counties"))
library(zonal)
library(ggplot2)
library(dplyr)
library(sf)
library(tidyr)
library(terra)
(r = rast('2019-01-01.tif'))
AOI  = AOI::aoi_get(state = "Northeast", county = "all")
plot(AOI$geometry, main = paste(nrow(AOI), "counties"))
knit("to_build/03_categorical.Rmd",     "vignettes/03_categorical.Rmd")
knitr::opts_chunk$set(
out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "c-",
message = FALSE, warning = FALSE, error = FALSE
)
library(zonal)
library(ggplot2)
library(dplyr)
library(sf)
library(tidyr)
library(terra)
(r = rast('2019-01-01.tif'))
AOI  = AOI::aoi_get(state = "Northeast", county = "all")
plot(AOI$geometry, main = paste(nrow(AOI), "counties"))
system.time({
lc = execute_zonal_cat(file, geom = AOI, "geoid")
})
file
lc = execute_zonal_cat(r, geom = AOI, "geoid")
glimpse(lc)
to_plot = lc %>%
pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
to_plot = lc %>%
pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
plot(to_plot['12'], main = "Croplands")
plot(to_plot['13'], main = "Urban")
setwd("/Users/mjohnson/github/zonal/")
knit("to_build/03_categorical.Rmd",     "vignettes/03_categorical.Rmd")
knitr::opts_chunk$set(
out.width = "100%",
fig.width = 7,
fig.height = 4, dpi = 150, fig.path = "c-",
message = FALSE, warning = FALSE, error = FALSE
)
library(zonal)
library(ggplot2)
library(dplyr)
library(sf)
library(tidyr)
library(terra)
(r = rast('2019-01-01.tif'))
AOI  = AOI::aoi_get(state = "Northeast", county = "all")
plot(AOI$geometry, main = paste(nrow(AOI), "counties"))
system.time({
lc = execute_zonal_cat(r, geom = AOI, "geoid")
})
glimpse(lc)
to_plot = lc %>%
pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
plot(to_plot['12'], main = "Croplands")
plot(to_plot['13'], main = "Urban")
AOI  = AOI::aoi_get(state = "North Central", county = "all")
plot(AOI$geometry, main = paste(nrow(AOI), "counties"))
rcl = read.csv("modis_lc.csv") %>%
select(from = Class, to = short)
head(rcl)
setwd("/Users/mjohnson/github/zonal/")
knit("to_build/03_categorical.Rmd",     "vignettes/03_categorical.Rmd")
knit("to_build/03_categorical.Rmd",     "vignettes/03_categorical.Rmd")
knit("to_build/03_categorical.Rmd",     "vignettes/03_categorical.Rmd")
knit("to_build/03_categorical.Rmd",     "vignettes/03_categorical.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
knit("to_build/04_nwm_channel.Rmd",     "vignettes/04_nwm_channel.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
fs::file_move(files, paste0('vignettes/', basename(files)))
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
