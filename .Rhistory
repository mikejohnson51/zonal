#TODO: leave this so the date
cols = names(cat_dt)[!names(cat_dt) %in% c(ID, w_names)]
cols
w
sum(dt$coverage_fraction == cat_dt$w)
dim(dt)
sum(dt$coverage_fraction == cat_dt$w)
sum(dt$value == cat_dt$V1)
df
as.data.frame(st[])
df2 = as.data.frame(values(st))
df = as.data.frame(st[])
df2
sum(df == df2)
length(df)
dim(df)
st
file
geom
ID
if(grepl("raster|character", class(file), ignore.case = TRUE)){ file = file[[1]] }
r    = suppressWarnings({ terra::rast(file)[[1]] })
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols[]      = (rep(1:y.dim, each = x.dim))
names(cols) = 'Y'
rows[]      = (rep(1:x.dim, times = y.dim))
names(rows) = 'X'
# We are doing this because terra snap out often crashes R!
vect = terra::project(terra::vect(geom), terra::crs(r))
ext  = terra::ext(vect)
res  = terra::res(r)[1]
ext  = c(ext$xmin - res, ext$xmax + res, ext$ymin - res, ext$ymax + res)
st =  terra::crop(terra::rast(list(cols, rows)), ext)
st
if(class(file) != "SpatRaster"){ file = terra::rast(file) }
if(max(layer) < terra::nlyr(file) & min(layer) > 0 ){
file = file[[layer]]
}
mins = terra::xyFromCell(file, terra::cellFromRowCol(file, min(w$Y), min(w$X)))
maxs = terra::xyFromCell(file, terra::cellFromRowCol(file, max(w$Y), max(w$X)))
cats =  terra::crop(file, terra::ext(c(mins[1], maxs[1], maxs[2], mins[2])), snap = "out")
cats
st
cells        = st[[1]]
names(cells) = 'grid_id'
cells[] = 1:terra::ncell(cells)
s       = terra::rast(list(st, cells))
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE) })
out2 = data.table::rbindlist(out1)
out2[,(ID) := rep(geom[[ID]], times = sapply(out1, nrow))]
setnames(out2, "coverage_fraction", "w")
setDT(out2, key = "grid_id")
out2
w = out2
mins = terra::xyFromCell(file, terra::cellFromRowCol(file, min(w$Y), min(w$X)))
maxs = terra::xyFromCell(file, terra::cellFromRowCol(file, max(w$Y), max(w$X)))
cats =  terra::crop(file, terra::ext(c(mins[1], maxs[1], maxs[2], mins[2])), snap = "out")
cats
st
plot(st)
w
min(w$Y)
min(w$X)
plot(cats)
st
min(w$Y)
min(w$X)
max(w$Y)
max(w$X)
w = weighting_grid(file, geom, "geoid")
min(w$Y)
min(w$X)
if(grepl("raster|character", class(file), ignore.case = TRUE)){ file = file[[1]] }
r    = suppressWarnings({ terra::rast(file)[[1]] })
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols[]      = (rep(1:y.dim, each = x.dim))
names(cols) = 'Y'
rows[]      = (rep(1:x.dim, times = y.dim))
names(rows) = 'X'
y.dim
x.dim
# We are doing this because terra snap out often crashes R!
vect = terra::project(terra::vect(geom), terra::crs(r))
ext  = terra::ext(vect)
res  = terra::res(r)[1]
ext  = c(ext$xmin - res, ext$xmax + res, ext$ymin - res, ext$ymax + res)
st =  terra::crop(terra::rast(list(cols, rows)), ext)
st
cells        = st[[1]]
names(cells) = 'grid_id'
cells[] = 1:terra::ncell(cells)
s       = terra::rast(list(st, cells))
s
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE) })
out1
out2 = data.table::rbindlist(out1)
out2
out2[,(ID) := rep(geom[[ID]], times = sapply(out1, nrow))]
max(out2$X)
min(out2$X)
s
ext  = c(ext$xmin, ext$xmax, ext$ymin, ext$ymax)
cats =  terra::crop(file,
terra::ext(c(mins[1], maxs[1], maxs[2], mins[2])))
cats
plot(cats)
cats
cats
plot(cats)
names(df) <- paste0('V', 1:ncol(df))
df$grid_id = 1:nrow(df)
df
devtools::load_all(".")
cat_dt = .zonal_io(file, w)
cat_dt
#TODO: leave this so the date
cols = names(cat_dt)[!names(cat_dt) %in% c(ID, w_names)]
cat_dt[, frac_total := (w / sum(w, na.rm = TRUE)), by = c(ID)]
dt2 = cat_dt[, .(freq = sum(frac_total, na.rm = TRUE)), by = c(ID, cols)]
dim(dt)
dim(cat_dt)
df = exact_extract(raster(file), AOI, include_cols = "geoid")[[1]]
dt = setDT(df)
dt$frac_total = dt$coverage_fraction / sum(dt$coverage_fraction)
dim(dt)
dim(cat_dt)
sum(dt$coverage_fraction == cat_dt$w)
cat_dt = .zonal_io(file, w)
cat_dt
dim(cat_dt)
dim(dt)
cat_dt[, frac_total := (w / sum(w, na.rm = TRUE)), by = c(ID)]
dt2 = cat_dt[, .(freq = sum(frac_total, na.rm = TRUE)), by = c(ID, cols)]
dt2
rcl
dt = setDT(df)
dt$frac_total = dt$coverage_fraction / sum(dt$coverage_fraction)
dt[, .(freq = sum(frac_total, na.rm = TRUE)), by = .(value)]
dt2
cat_dt
# We are doing this because terra snap out often crashes R!
vect = terra::project(terra::vect(geom), terra::crs(r))
vect
ext  = terra::ext(vect)
res  = terra::res(r)[1]
#ext  = c(ext$xmin - res, ext$xmax + res, ext$ymin - res, ext$ymax + res)
ext  = c(ext$xmin, ext$xmax, ext$ymin, ext$ymax)
st =  terra::crop(terra::rast(list(cols, rows)), ext, snap = "out")
r    = suppressWarnings({ terra::rast(file)[[1]] })
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols[]      = (rep(1:y.dim, each = x.dim))
names(cols) = 'Y'
rows[]      = (rep(1:x.dim, times = y.dim))
names(rows) = 'X'
# We are doing this because terra snap out often crashes R!
vect = terra::project(terra::vect(geom), terra::crs(r))
ext  = terra::ext(vect)
res  = terra::res(r)[1]
#ext  = c(ext$xmin - res, ext$xmax + res, ext$ymin - res, ext$ymax + res)
ext  = c(ext$xmin, ext$xmax, ext$ymin, ext$ymax)
st =  terra::crop(terra::rast(list(cols, rows)), ext, snap = "out")
st
cells        = st[[1]]
names(cells) = 'grid_id'
cells[] = 1:terra::ncell(cells)
s       = terra::rast(list(st, cells))
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE) })
out1
exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE,
include_cols = "geoid")
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE,
include_cols = "geoid") })
out1
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE,
include_cols = ID) })
out1
out2 = data.table::rbindlist(out1)
setnames(out2, "coverage_fraction", "w")
setDT(out2, key = "grid_id")
weighting_grid = function(file, geom, ID){
if(grepl("raster|character", class(file), ignore.case = TRUE)){ file = file[[1]] }
r    = suppressWarnings({ terra::rast(file)[[1]] })
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols[]      = (rep(1:y.dim, each = x.dim))
names(cols) = 'Y'
rows[]      = (rep(1:x.dim, times = y.dim))
names(rows) = 'X'
# We are doing this because terra snap out often crashes R!
vect = terra::project(terra::vect(geom), terra::crs(r))
ext  = terra::ext(vect)
res  = terra::res(r)[1]
#ext  = c(ext$xmin - res, ext$xmax + res, ext$ymin - res, ext$ymax + res)
ext  = c(ext$xmin, ext$xmax, ext$ymin, ext$ymax)
st =  terra::crop(terra::rast(list(cols, rows)), ext, snap = "out")
cells        = st[[1]]
names(cells) = 'grid_id'
cells[] = 1:terra::ncell(cells)
s       = terra::rast(list(st, cells))
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE,
include_cols = ID) })
out2 = data.table::rbindlist(out1)
setnames(out2, "coverage_fraction", "w")
setDT(out2, key = "grid_id")
}
devtools::load_all(".")
rm(list = c("ext", "vect", "weighting_grid"))
devtools::load_all(".")
w = NULL
ID
geom
. <- frac_total <- NULL
w = .find_w(file, geom, ID, w)
w_names = c("grid_id", "w", "X", "Y")
ID = names(w)[!names(w) %in% w_names]
w
. <- frac_total <- NULL
w       = .find_w(file, geom, ID, w)
w_names = c("grid_id", "w", "X", "Y")
ID = names(w)[!names(w) %in% w_names]
cat_dt = .zonal_io(file, w)
#TODO: leave this so the date
cols = names(cat_dt)[!names(cat_dt) %in% c(ID, w_names)]
cat_dt[, frac_total := (w / sum(w, na.rm = TRUE)), by = c(ID)]
dt2 = cat_dt[, .(freq = sum(frac_total, na.rm = TRUE)), by = c(ID, cols)]
dim(dt)
dim(cat_dt)
sum(dt$coverage_fraction == cat_dt$w)
sum(dt$value == cat_dt$V1)
dt$frac_total = dt$coverage_fraction / sum(dt$coverage_fraction)
dt2
w
if(class(file) != "SpatRaster"){ file = terra::rast(file) }
if(max(layer) < terra::nlyr(file) & min(layer) > 0 ){
file = file[[layer]]
}
mins = terra::xyFromCell(file, terra::cellFromRowCol(file, min(w$Y), min(w$X)))
maxs = terra::xyFromCell(file, terra::cellFromRowCol(file, max(w$Y), max(w$X)))
cats =  terra::crop(file,
terra::ext(c(mins[1], maxs[1], maxs[2], mins[2])),
snap = "out")
cats
. <- frac_total <- NULL
cat_dt = .zonal_io(file, w)
cat_dt
#TODO: leave this so the date
cols = names(cat_dt)[!names(cat_dt) %in% c(ID, w_names)]
dim(dt)
dim(cat_dt)
cat_dt
install.packages(terra)
install.packages('terra')
library(zonal)
library(ggplot2)
library(ggplot2)
library(dplyr)
devtools::load_all(".")
AOI  = AOI::aoi_get(state = "Northeast", county = "all")
geom = filter(AOI, geoid  == 36103)
lc = execute_zonal_cat(file, geom = AOI, "geoid")
lc = execute_zonal_cat(file, geom = geom, "geoid")
file
file = '/Users/mjohnson/github/zonal/depreciate/2019-01-01.tif'
file
lc = execute_zonal_cat(file, geom = geom, "geoid")
lc
glimpse(lc)
to_plot = lc %>%
tidyr::pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
library(sf)
to_plot = lc %>%
tidyr::pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
to_plot = merge(AOI, lc)
to_plot = lc %>%
tidyr::pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
plot(to_plot['13'], main = "Urban")
to_plot['13']
lc
system.time({
lc = execute_zonal_cat(file, geom = AOI, "geoid")
})
lc
to_plot = lc %>%
tidyr::pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
plot(to_plot['13'], main = "Urban")
AOI  = AOI::aoi_get(state = "North Central", county = "all")
plot(AOI$geometry, main = paste(nrow(AOI), "counties"))
rcl = read.csv("../inst/modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
head(rcl)
system.time({
lc = execute_zonal_cat(file, geom = AOI, ID = "geoid", rcl = rcl)
})
midwest = merge(AOI, lc)
plot(filter(midwest, value == 'croplands')['percentage'], main = "Croplands")
plot(filter(midwest, value == 'urban')['percentage'], main = "Urban")
forest = filter(lc, grepl('forest|broad|needle', value)) %>%
group_by(geoid) %>%
summarise(forest = sum(percentage)) %>%
right_join(AOI) %>%
sf::st_as_sf()
plot(forest['forest'], main = "Forest")
dim(dt)
dim(cat_dt)
sum(dt$coverage_fraction == cat_dt$w)
sum(dt$value == cat_dt$V1)
execute_zonal_cat
update.packages()
devtools::load_all(".")
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
library(knitr)
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
devtools::load_all(".")
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
rcl
library(zonal)
library(ggplot2)
library(dplyr)
library(sf)
rcl = read.csv("../inst/modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
rcl
plot(to_plot['10'], main = "Urban")
plot(to_plot['1'], main = "Urban")
plot(to_plot['2'], main = "Urban")
plot(to_plot['3'], main = "Urban")
rcl
plot(to_plot['12'], main = "Urban")
rcl
plot(to_plot['12'], main = "Croplands")
plot(to_plot['13'], main = "Urban")
rcl = read.csv("../inst/modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
library(knitr)
fs::file_copy("inst/01_weight_creation.Rmd", 'vignettes/01_weight_creation.Rmd.orig', overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
fs::file_copy("inst/02_intersections.Rmd", 'vignettes/02_intersections.Rmd.orig', overwrite = TRUE)
knit("vignettes/02_intersections.Rmd.orig", "vignettes/02_intersections.Rmd")
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
library(zonal)
library(sf)
library(dplyr)
library(ggplot2)
file <- '/Users/mjohnson/Downloads/pr_1979.nc'
AOI  <- AOI::aoi_get(state = "south", county = "all")
system.time({
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w)
})
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
system.time({
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
# PET zone: Counties, time slices/ID
dim(pr_zone)
# Plot Day with the maximum single county max rainfall.
n = colnames(pr_zone)[which(pr_zone[,-1] == max(pr_zone[,-1]), arr.ind = TRUE)[2] + 1]
plot(merge(AOI, pr_zone)[n], border = NA)
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(select(pr_zone, -geoid))))
plot(merge(AOI, pr_zone)[n2], border = NA)
n2
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(select(pr_zone, -geoid))))
pr_zone
which.max(colSums(select(pr_zone, -geoid)))
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(dplyr::select(pr_zone, -geoid))))
plot(merge(AOI, pr_zone)[n2], border = NA)
data = pr_zone %>%
slice_max(rowSums(select(., -geoid))) %>%
tidyr::pivot_longer(-geoid, names_to = "date", values_to = "prcp")
data = pr_zone %>%
slice_max(rowSums(dplyr::select(., -geoid))) %>%
tidyr::pivot_longer(-geoid, names_to = "date", values_to = "prcp")
head(data)
ggplot(data) +
aes(x = as.Date(date), y = prcp) +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
gplot(data) +
aes(x = as.Date(date), y = prcp) +
geom_line()
ggplot(data) +
aes(x = as.Date(date), y = prcp) +
geom_line()
ggplot(data) +
aes(x = date, y = prcp) +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
ggplot(data) +
aes(x = date, y = prcp) +
geom_line()
ggplot(data, aes(x = date, y = prcp))  +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
ggplot(data, aes(x = as.factor(date), y = prcp))  +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
mutate(day = as.numeric(gsub("V","", day))
data
data = pr_zone %>%
slice_max(rowSums(dplyr::select(., -geoid))) %>%
tidyr::pivot_longer(-geoid, names_to = "day", values_to = "prcp") %>%
mutate(day = as.numeric(gsub("V","", day)))
data
ggplot(data, aes(x = day, y = prcp))  +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
file = '/Users/mjohnson/Downloads/MCD12Q1.006.nc'
rcl = read.csv("inst/modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
system.time({
# Build Weight Grid
w  = weighting_grid(file, AOI, "geoid")
# Intersect, and relclassify
lc = execute_zonal_cat(file, w, rcl)
})
# Intersect, and relclassify
lc = execute_zonal_cat(file, AOI, "geoid", rcl = rcl)
file = '/Users/mjohnson/github/zonal/depreciate/2019-01-01.tif'
rcl = read.csv("inst/modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
system.time({
lc = execute_zonal_cat(file, AOI, "geoid", rcl = rcl)
})
to_plot = merge(AOI, lc)
ggplot(to_plot) +
geom_sf(aes(fill = percentage), color = "transparent") +
scale_fill_gradient2() +
geom_sf(data = sf::st_union(AOI), fill = "transparent") +
facet_wrap(~value) +
theme_minimal()
ggplot(to_plot) +
geom_sf(aes(fill = percentage), color = "transparent") +
scale_fill_gradient2() +
geom_sf(data = sf::st_union(AOI), fill = "transparent") +
facet_wrap(~value) +
theme_void()
ggplot(to_plot) +
geom_sf(aes(fill = percentage), color = "transparent") +
scale_fill_gradient2() +
geom_sf(data = sf::st_union(AOI), fill = "transparent") +
facet_wrap(~value) +
theme_void() +
theme(legend.position = "bottom")
