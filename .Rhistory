sf::st_sfc(sf::st_bbox(geom))
sf::st_sf(sf::st_bbox(geom))
sf::st_as_sfc(sf::st_bbox(geom))
st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT")
sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT")
sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT") %>%
unique()
sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT") %>%
terra::vect()
library(dplyr)
sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT") %>%
terra::vect()
?terra::extract
?terra::extract(r, cells = T)
terra::extract(r, cells = T)
g = sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT") %>%
terra::vect()
terra::extract(r, g, cells = T)
r
g
terra::crs(g) = terra::crs(r)
terra::extract(r, g, cells = T)
g
r
terra::plot(g)
terra::extract(r, g, cells = T)
terra::extract(r, g, cells = T)
g
r
r <- rast(ncols=5, nrows=5, xmin=0, xmax=5, ymin=0, ymax=5)
values(r) <- 1:25
xy <- rbind(c(0.5,0.5), c(2.5,2.5))
p <- vect(xy, crs="+proj=longlat +datum=WGS84")
p
library(terra)
p
r <- rast(ncols=5, nrows=5, xmin=0, xmax=5, ymin=0, ymax=5)
values(r) <- 1:25
xy <- rbind(c(0.5,0.5), c(2.5,2.5))
p <- vect(xy, crs="+proj=longlat +datum=WGS84")
p
extract(r, xy)
extract(r, p)
xy
g = sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT") %>%
sf::st_coordinates()
g
terra::extract(r, g, cells = T)
plot(g)
plot(r, add = T)
plot(r)
file
r = if(grepl("raster|character", class(file), ignore.case = TRUE)){
file[[1]]
} else {
suppressWarnings({ terra::rast(file)[[1]] })
}
plot(r)
plot(r, add = T)
plot(g, add = T)
plot(r)
plot(r)
plot(g, add = T)
g = sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT") %>%
terra::vect()
g
plot(r)
plot(g, add = T)
plot(g, add = T, cex = 5)
plot(g, add = T, cex = 50)
crs(g) = crs(r)
plot(g, add = T, cex = 50)
g
plot(g)
plot(r, add = T, cex = 50)
plot(r, add = T)
g = sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT") %>%
st_transform(st_crs(r))
g = sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT") %>%
sf::st_transform(st_crs(r))
g = sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom)), "POINT") %>%
sf::st_transform(sf::st_crs(r))
geom
g = sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom) ), "POINT") %>%
sf::st_transform(sf::st_crs(r))
sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom) )
sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom) ), "POINT")
sf::st_crs(r)
g = sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom) ), "POINT") %>%
sf::st_transform(crs(r))
g
plot(g)
plot(r, add = T)
terra::extract(r, g, cells = T)
g = sf::st_cast(sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom) ), "POINT") %>%
sf::st_transform(crs(r)) %>%
vect()
terra::extract(r, g, cells = T)
ind - terra::extract(r, g, cells = T)
ind = terra::extract(r, g, cells = T)
terra::rowColFromCell(r, ind$cell)
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(crs(r))
g_pts = st_cast(g_bbox, "POINTS")
g_pts = sf::st_cast(g_bbox, "POINT")
ind = terra::extract(r, vect(g_pts), cells = T)
g_pts
ind = terra::extract(r, vect(g_pts), cells = T)
terra::crop(r, vect(g_bbox)
)
s
ind
s
terra::rowColFromCell(r, ind$cell)
terra::crop(r, vect(g_bbox))
plot(s[[1]])
ind2 = terra::rowColFromCell(r, ind$cell)
ind2
range(ind2[1,])
range(ind2[1,])
range(ind2[,1])
range(ind2[,2])
# We are doing this because terra snap out often crashes R!
vect = terra::project(terra::vect(geom), terra::crs(r))
ext  = terra::ext(vect)
ext  = c(ext$xmin, ext$xmax, ext$ymin, ext$ymax)
cols
r
st =  terra::crop(terra::rast(list(cols, rows)), ext, snap = "out")
terra::crop(r, vect(g_bbox), snap = "out")
st
vect(g_bbox)
g
vect
ext
vect(g_bbox)
plot(vect(g_bbox))
plot(vect, add = T)
min(ind2[,1])
plot(s[[1]])
s
cr = terra::crop(r, vect(g_bbox), snap = "out")
Y = cr
min(ind2[,2]):max(ind2[,2])
min(ind2[,1]):max(ind2[,1])
values(Y) = (rep(min(ind2[,1]):max(ind2[,1]), each = dim(r)[2])))
values(Y) = (rep(min(ind2[,1]):max(ind2[,1]), each = dim(r)[2]))
values(Y) = (rep(min(ind2[,1]):max(ind2[,1]), each = dim(r)[1]))
tmp = (rep(min(ind2[,1]):max(ind2[,1]), each = dim(r)[1]))
length(tmp)
ncell(r)
ind2
Y
ncell(Y)
length(tmp)
values(Y) = (rep(min(ind2[,1]):max(ind2[,1]), each = dim(Y)[2]))
plot(Y)
Y <- X <- cr
values(X) = (rep(min(ind2[,2]):max(ind2[,2]), each = dim(X)[1]))
plot(X)
values(X) = (rep(min(ind2[,2]):max(ind2[,2]), times = dim(X)[1]))
plot(X)
Y <- X <- grid_cells <- cr
values(Y) = (rep(min(ind2[,1]):max(ind2[,1]), each = dim(Y)[2]))
values(X) = (rep(min(ind2[,2]):max(ind2[,2]), times = dim(X)[1]))
grid_cells = terra::crop(r, vect(g_bbox), snap = "out")
Y <- X <- grid_cells
values(grid_cells) = 1:ncell(X)
rast(list(X,Y,grid_cells))
names(s) = c("X", "Y", "grid_cells")
s = rast(list(X,Y,grid_cells))
Y <- X <- grid_cells <-  terra::crop(r, vect(g_bbox), snap = "out")
values(Y) = (rep(min(ind2[,1]):max(ind2[,1]), each = dim(Y)[2]))
values(X) = (rep(min(ind2[,2]):max(ind2[,2]), times = dim(X)[1]))
values(grid_cells) = 1:ncell(X)
s = rast(list(X,Y,grid_cells))
names(s) = c("X", "Y", "grid_cells")
plot(s)
ncell(X)
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE,
include_cols = ID) })
out2 = data.table::rbindlist(out1)
data.table::setnames(out2, "coverage_fraction", "w")
data.table::setDT(out2, key = "grid_id")
names(s) = c("X", "Y", "grid_id")
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE,
include_cols = ID) })
out2 = data.table::rbindlist(out1)
data.table::setnames(out2, "coverage_fraction", "w")
data.table::setDT(out2, key = "grid_id")
out2
devtools::load_all(".")
r1
out = execute_zonal(r1, geom = catchments, "ID")
out
out
library(zonal)
library(dplyr)
library(tidyr)
library(ggplot2)
file <- 'to_build/pr_2020.nc'
AOI  <- AOI::aoi_get(state = "south", county = "all")
system.time({
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
w
file
AOI
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
geom = AOI
file
r = if(grepl("raster|character", class(file), ignore.case = TRUE)){
file[[1]]
} else {
suppressWarnings({ terra::rast(file)[[1]] })
}
r
grepl("raster|character", class(file), ignore.case = TRUE)
file
class(file)
r = if(grepl("raster", class(file), ignore.case = TRUE)){
file[[1]]
} else {
suppressWarnings({ terra::rast(file)[[1]] })
}
r
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(crs(r))
g_pts = sf::st_cast(g_bbox, "POINT")
ind = terra::extract(r, vect(g_pts), cells = T)
ind2 = terra::rowColFromCell(r, ind$cell)
Y <- X <- grid_cells <-  terra::crop(r, vect(g_bbox), snap = "out")
values(Y) = (rep(min(ind2[,1]):max(ind2[,1]), each = dim(Y)[2]))
ind2
geom
Y <- X <- grid_cells <-  terra::crop(r, vect(g_bbox), snap = "out")
plot(t)
plot(r)
ind
g_bbox
plot(vect(g_bbox), add = T)
r = if(grepl("raster|character", class(file), ignore.case = TRUE)){
file[[1]]
} else {
suppressWarnings({ terra::rast(file)[[1]] })
}
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols = terra::init(cols, (rep(1:y.dim, each = x.dim)))
cols
r = if(grepl("raster", class(file), ignore.case = TRUE)){
file[[1]]
} else {
suppressWarnings({ terra::rast(file)[[1]] })
}
r
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols = terra::init(cols, (rep(1:y.dim, each = x.dim)))
cols
names(cols) = 'Y'
rows = terra::init(cols, (rep(1:x.dim, times = y.dim)))
domain = sf::st_as_sfc(sf::st_bbox(r), crs = sf::st_crs(r))
r
sf::st_bbox(r)
domain = sf::st_as_sfc(terra::ext(r), crs = sf::st_crs(r))
terra::ext(r)
domain = sf::st_as_sfc(as.vector(terra::ext(r)), crs = sf::st_crs(r))
as.vector(terra::ext(r))
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r))), crs = sf::st_crs(r))
domain
sf::st_crs(r)
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r))), crs = crs(r))
domain
crs(r)
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r))), crs = crs(r))
domain
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r))), crs = crs(r)) %>%
sf::st_set_crs(crs(s))
domain
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(crs(r))
sf::st_intersection(g_bbox, domain)
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r))), crs = crs(r)) %>%
sf::st_set_crs(crs(r))
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(crs(r))
sf::st_intersection(g_bbox, domain)
sf::st_intersection(g_bbox, domain) %>% plot()
g_pts = sf::st_cast(g_bbox, "POINT")
ind = terra::extract(r, vect(g_pts), cells = T)
ind2 = terra::rowColFromCell(r, ind$cell)
ind2
ind
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(crs(r)) %>%
sf::st_intersection(domain)
g_pts = sf::st_cast(g_bbox, "POINT")
ind = terra::extract(r, vect(g_pts), cells = T)
ind2 = terra::rowColFromCell(r, ind$cell)
ind2
Y <- X <- grid_cells <-  terra::crop(r, vect(g_bbox), snap = "out")
values(Y) = (rep(min(ind2[,1]):max(ind2[,1]), each = dim(Y)[2]))
values(X) = (rep(min(ind2[,2]):max(ind2[,2]), times = dim(X)[1]))
values(grid_cells) = 1:ncell(X)
s = rast(list(X,Y,grid_cells))
plot(s[[1]])
plot(vect(geom), add =T)
devtools::load_all(".")
system.time({
# Build Weight Grid
w        = weighting_grid(file, geom = AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
# PET zone: Counties, time slices/ID
dim(pr_zone)
x = merge(AOI, pr_zone)
# Plot Day with the maximum single county max rainfall.
n = colnames(pr_zone)[which(pr_zone[,-1] == max(pr_zone[,-1]), arr.ind = TRUE)[2] + 1]
ggplot() +
geom_sf(data = x, aes(fill = get(n)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR (mm)")
r_crs = crs(r)
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r)))) %>%
sf::st_set_crs(r_crs)
domain
r
r_crs = crs(r)
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r)))) %>%
sf::st_set_crs(r_crs)
sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom))
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(r_crs) %>%
sf::st_intersection(domain)
g_bbox
g_pts = sf::st_cast(g_bbox, "POINT")
ind = terra::extract(r, vect(g_pts), cells = T)
ind2 = terra::rowColFromCell(r, ind$cell)
Y <- X <- grid_cells <-  terra::crop(r, vect(g_bbox), snap = "out")
values(Y) = (rep(min(ind2[,1]):max(ind2[,1]), each = dim(Y)[2]))
values(X) = (rep(min(ind2[,2]):max(ind2[,2]), times = dim(X)[1]))
values(grid_cells) = 1:ncell(X)
s = rast(list(X,Y,grid_cells))
names(s) = c("X", "Y", "grid_id")
devtools::load_all(".")
system.time({
# Build Weight Grid
w        = weighting_grid(file, geom = AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
# PET zone: Counties, time slices/ID
dim(pr_zone)
x = merge(AOI, pr_zone)
# Plot Day with the maximum single county max rainfall.
n = colnames(pr_zone)[which(pr_zone[,-1] == max(pr_zone[,-1]), arr.ind = TRUE)[2] + 1]
ggplot() +
geom_sf(data = x, aes(fill = get(n)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR (mm)")
ind2
sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom))
ind2
file[[1]]
r = if(grepl("raster", class(file), ignore.case = TRUE)){
file[[1]]
} else {
suppressWarnings({ terra::rast(file)[[1]] })
}
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols = terra::init(cols, (rep(1:y.dim, each = x.dim)))
names(cols) = 'Y'
rows = terra::init(cols, (rep(1:x.dim, times = y.dim)))
names(rows) = 'X'
# We are doing this because terra snap out often crashes R!
vect = terra::project(terra::vect(geom), terra::crs(r))
ext  = terra::ext(vect)
ext  = c(ext$xmin, ext$xmax, ext$ymin, ext$ymax)
st =  terra::crop(terra::rast(list(cols, rows)), ext, snap = "out")
st
s
sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom))
sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(r_crs)
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(r_crs)
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r)))) %>%
sf::st_set_crs(r_crs)
plot(domain)
plot(g_bbox, add = T)
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(r_crs) %>%
sf::st_intersection(domain)
plot(g_bbox, add = T, col = 'red')
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r)))) %>%
sf::st_set_crs(r_crs)
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(r_crs)
domain
g_bbox
fin = sf::st_intersection(g_bbox, domain)
plot(g_bbox, add = T)
plot(domain)
plot(g_bbox, add = T)
plot(fin, add = T)
fin
sf::sf_use_s2(FALSE)
fin = sf::st_intersection(g_bbox, domain)
plot(domain)
plot(g_bbox, add = T)
plot(fin, add = T)
devtools::load_all(".")
system.time({
# Build Weight Grid
w        = weighting_grid(file, geom = AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
sf::sf_use_s2(FALSE)
r = if(grepl("raster", class(file), ignore.case = TRUE)){
file[[1]]
} else {
suppressWarnings({ terra::rast(file)[[1]] })
}
r_crs = crs(r)
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r)))) %>%
sf::st_set_crs(r_crs)
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(r_crs)
fin = sf::st_intersection(g_bbox, domain)
g_pts = sf::st_cast(g_bbox, "POINT")
ind = terra::extract(r, vect(g_pts), cells = T)
ind2 = terra::rowColFromCell(r, ind$cell)
ind2
devtools::load_all(".")
system.time({
# Build Weight Grid
w        = weighting_grid(file, geom = AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
sf::sf_use_s2(FALSE)
r = if(grepl("raster", class(file), ignore.case = TRUE)){
file[[1]]
} else {
suppressWarnings({ terra::rast(file)[[1]] })
}
r_crs = crs(r)
domain = sf::st_as_sfc(sf::st_bbox(as.vector(terra::ext(r)))) %>%
sf::st_set_crs(r_crs)
domain
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(r_crs) %>%
sf::st_intersection(g_bbox, domain)
g_bbox
g_bbox = sf::st_as_sfc(sf::st_bbox(geom), crs = sf::st_crs(geom)) %>%
sf::st_transform(r_crs) %>%
sf::st_intersection(domain)
g_bbox
g_pts = sf::st_cast(g_bbox, "POINT")
ind = terra::extract(r, vect(g_pts), cells = T)
ind2 = terra::rowColFromCell(r, ind$cell)
ind2
devtools::load_all(".")
system.time({
# Build Weight Grid
w        = weighting_grid(file, geom = AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
# PET zone: Counties, time slices/ID
dim(pr_zone)
x = merge(AOI, pr_zone)
# Plot Day with the maximum single county max rainfall.
n = colnames(pr_zone)[which(pr_zone[,-1] == max(pr_zone[,-1]), arr.ind = TRUE)[2] + 1]
ggplot() +
geom_sf(data = x, aes(fill = get(n)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR (mm)")
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(dplyr::select(pr_zone, -geoid))))
ggplot() +
geom_sf(data = x, aes(fill = get(n2)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR (mm)")
devtools::load_all(".")
devtools::document()
devtools::load_all()
devtools::check(vignettes = FALSE)
rcompendium::add_dependencies()
rcompendium::add_dependencies_badge()
rcompendium::add_r_depend()
knitr::knit("README.Rmd")
devtools::install_local(force = TRUE)
