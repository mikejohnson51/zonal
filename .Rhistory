library(ggplot2)
library(ggplot2)
library(dplyr)
devtools::load_all(".")
AOI  = AOI::aoi_get(state = "Northeast", county = "all")
geom = filter(AOI, geoid  == 36103)
lc = execute_zonal_cat(file, geom = AOI, "geoid")
lc = execute_zonal_cat(file, geom = geom, "geoid")
file
file = '/Users/mjohnson/github/zonal/depreciate/2019-01-01.tif'
file
lc = execute_zonal_cat(file, geom = geom, "geoid")
lc
glimpse(lc)
to_plot = lc %>%
tidyr::pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
library(sf)
to_plot = lc %>%
tidyr::pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
to_plot = merge(AOI, lc)
to_plot = lc %>%
tidyr::pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
plot(to_plot['13'], main = "Urban")
to_plot['13']
lc
system.time({
lc = execute_zonal_cat(file, geom = AOI, "geoid")
})
lc
to_plot = lc %>%
tidyr::pivot_wider(names_from = value, values_from = percentage) %>%
right_join(AOI) %>%
st_as_sf()
plot(to_plot['13'], main = "Urban")
AOI  = AOI::aoi_get(state = "North Central", county = "all")
plot(AOI$geometry, main = paste(nrow(AOI), "counties"))
rcl = read.csv("../inst/modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
head(rcl)
system.time({
lc = execute_zonal_cat(file, geom = AOI, ID = "geoid", rcl = rcl)
})
midwest = merge(AOI, lc)
plot(filter(midwest, value == 'croplands')['percentage'], main = "Croplands")
plot(filter(midwest, value == 'urban')['percentage'], main = "Urban")
forest = filter(lc, grepl('forest|broad|needle', value)) %>%
group_by(geoid) %>%
summarise(forest = sum(percentage)) %>%
right_join(AOI) %>%
sf::st_as_sf()
plot(forest['forest'], main = "Forest")
dim(dt)
dim(cat_dt)
sum(dt$coverage_fraction == cat_dt$w)
sum(dt$value == cat_dt$V1)
execute_zonal_cat
update.packages()
devtools::load_all(".")
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
library(knitr)
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
devtools::load_all(".")
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
rcl
library(zonal)
library(ggplot2)
library(dplyr)
library(sf)
rcl = read.csv("../inst/modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
rcl
plot(to_plot['10'], main = "Urban")
plot(to_plot['1'], main = "Urban")
plot(to_plot['2'], main = "Urban")
plot(to_plot['3'], main = "Urban")
rcl
plot(to_plot['12'], main = "Urban")
rcl
plot(to_plot['12'], main = "Croplands")
plot(to_plot['13'], main = "Urban")
rcl = read.csv("../inst/modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
library(knitr)
fs::file_copy("inst/01_weight_creation.Rmd", 'vignettes/01_weight_creation.Rmd.orig', overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
fs::file_copy("inst/02_intersections.Rmd", 'vignettes/02_intersections.Rmd.orig', overwrite = TRUE)
knit("vignettes/02_intersections.Rmd.orig", "vignettes/02_intersections.Rmd")
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
fs::file_copy("inst/03_categorical.Rmd", 'vignettes/03_categorical.Rmd.orig', overwrite = TRUE)
knit("vignettes/03_categorical.Rmd.orig", "vignettes/03_categorical.Rmd")
files = list.files(".", ".png", full.names = TRUE)
fs::file_move(files, paste0('vignettes/', basename(files)))
pkgdown::build_site()
library(zonal)
library(sf)
library(dplyr)
library(ggplot2)
file <- '/Users/mjohnson/Downloads/pr_1979.nc'
AOI  <- AOI::aoi_get(state = "south", county = "all")
system.time({
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w)
})
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
system.time({
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
# PET zone: Counties, time slices/ID
dim(pr_zone)
# Plot Day with the maximum single county max rainfall.
n = colnames(pr_zone)[which(pr_zone[,-1] == max(pr_zone[,-1]), arr.ind = TRUE)[2] + 1]
plot(merge(AOI, pr_zone)[n], border = NA)
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(select(pr_zone, -geoid))))
plot(merge(AOI, pr_zone)[n2], border = NA)
n2
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(select(pr_zone, -geoid))))
pr_zone
which.max(colSums(select(pr_zone, -geoid)))
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(dplyr::select(pr_zone, -geoid))))
plot(merge(AOI, pr_zone)[n2], border = NA)
data = pr_zone %>%
slice_max(rowSums(select(., -geoid))) %>%
tidyr::pivot_longer(-geoid, names_to = "date", values_to = "prcp")
data = pr_zone %>%
slice_max(rowSums(dplyr::select(., -geoid))) %>%
tidyr::pivot_longer(-geoid, names_to = "date", values_to = "prcp")
head(data)
ggplot(data) +
aes(x = as.Date(date), y = prcp) +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
gplot(data) +
aes(x = as.Date(date), y = prcp) +
geom_line()
ggplot(data) +
aes(x = as.Date(date), y = prcp) +
geom_line()
ggplot(data) +
aes(x = date, y = prcp) +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
ggplot(data) +
aes(x = date, y = prcp) +
geom_line()
ggplot(data, aes(x = date, y = prcp))  +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
ggplot(data, aes(x = as.factor(date), y = prcp))  +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
mutate(day = as.numeric(gsub("V","", day))
data
data = pr_zone %>%
slice_max(rowSums(dplyr::select(., -geoid))) %>%
tidyr::pivot_longer(-geoid, names_to = "day", values_to = "prcp") %>%
mutate(day = as.numeric(gsub("V","", day)))
data
ggplot(data, aes(x = day, y = prcp))  +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
file = '/Users/mjohnson/Downloads/MCD12Q1.006.nc'
rcl = read.csv("inst/modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
system.time({
# Build Weight Grid
w  = weighting_grid(file, AOI, "geoid")
# Intersect, and relclassify
lc = execute_zonal_cat(file, w, rcl)
})
# Intersect, and relclassify
lc = execute_zonal_cat(file, AOI, "geoid", rcl = rcl)
file = '/Users/mjohnson/github/zonal/depreciate/2019-01-01.tif'
rcl = read.csv("inst/modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
system.time({
lc = execute_zonal_cat(file, AOI, "geoid", rcl = rcl)
})
to_plot = merge(AOI, lc)
ggplot(to_plot) +
geom_sf(aes(fill = percentage), color = "transparent") +
scale_fill_gradient2() +
geom_sf(data = sf::st_union(AOI), fill = "transparent") +
facet_wrap(~value) +
theme_minimal()
ggplot(to_plot) +
geom_sf(aes(fill = percentage), color = "transparent") +
scale_fill_gradient2() +
geom_sf(data = sf::st_union(AOI), fill = "transparent") +
facet_wrap(~value) +
theme_void()
ggplot(to_plot) +
geom_sf(aes(fill = percentage), color = "transparent") +
scale_fill_gradient2() +
geom_sf(data = sf::st_union(AOI), fill = "transparent") +
facet_wrap(~value) +
theme_void() +
theme(legend.position = "bottom")
pkgdown::build_site()
devtools::load_all(".")
library(devtools)
document()
check()
devtools::load_all(".")
check()
check()
library(zonal)
library(ggplot2)
library(dplyr)
library(sf)
read.csv("modis_lc.csv")
file = 'pet_2020.nc'
(s = terra::rast(file))
geom <- st_make_valid(read_sf('ngen_01a-4.gpkg', "catchments"))
file = '2019-01-01.tif'
(r = terra::rast(file))
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::load_all()
devtools::check()
rcompendium::add_dependencies()
rcompendium::add_dependencies_badge()
rcompendium::add_r_depend()
knitr::knit("README.Rmd")
file <- 'to_build/pr_2020.nc'
AOI  <- AOI::aoi_get(state = "south", county = "all")
library(AOI)
AOI  <- AOI::aoi_get(state = "south", county = "all")
install.packages("USAboundariesData", repos = "http://packages.ropensci.org", type = "source")
devtools::install_github("ropensci/USAboundaries")
devtools::install_github("ropensci/USAboundariesData")
AOI  <- AOI::aoi_get(state = "south", county = "all")
AOI  <- AOI::aoi_get(state = "south", county = "all")
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
getwd()
list.files()
file <- 'to_build/pet_2020.nc'
system.time({
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
file <- 'to_build/pr_2020.nc'
file <- 'to_build/pr_2020.nc'
AOI  <- AOI::aoi_get(state = "south", county = "all")
system.time({
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
# Plot Day with the maximum single county max rainfall.
n = colnames(pr_zone)[which(pr_zone[,-1] == max(pr_zone[,-1]), arr.ind = TRUE)[2] + 1]
plot(merge(AOI, pr_zone)[n], border = NA)
x = merge(AOI, pr_zone)[n]
x
n
ggplot() +
geom_sf(x, aes(fill = !!n))
ggplot() +
geom_sf(data = x, aes(fill = !!n))
ggplot() +
geom_sf(data = x, aes(fill = get(n)))
ggplot() +
geom_sf(data = x, aes(fill = get(n), color = NA)) +
scale_fill_viridis_c()
ggplot() +
geom_sf(data = x, aes(fill = get(n), color = NA)) +
scale_fill_viridis_c()
ggplot() +
geom_sf(data = x, aes(fill = get(n), color = "NA")) +
scale_fill_viridis_c()
ggplot() +
geom_sf(data = x, aes(fill = get(n), color = NA))
ggplot() +
geom_sf(data = x, aes(fill = get(n), color = "transparent")) +
scale_fill_viridis_c()
ggplot() +
geom_sf(data = x, aes(fill = get(n)), color = NA) +
scale_fill_viridis_c()
ggplot() +
geom_sf(data = x, aes(fill = get(n)), color = NA) +
scale_fill_viridis_c() +
theme_void()
ggplot() +
geom_sf(data = x, aes(fill = get(n)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR")
ggplot() +
geom_sf(data = x, aes(fill = get(n)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR (mm)")
pr_zone
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(dplyr::select(pr_zone, -geoid))))
x = merge(AOI, pr_zone)[n2]
ggplot() +
geom_sf(data = x, aes(fill = get(n2)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR (mm)")
x = merge(AOI, pr_zone)
x
x = merge(AOI, pr_zone)
# Plot Day with the maximum single county max rainfall.
n = colnames(pr_zone)[which(pr_zone[,-1] == max(pr_zone[,-1]), arr.ind = TRUE)[2] + 1]
ggplot() +
geom_sf(data = x, aes(fill = get(n)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR (mm)")
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(dplyr::select(pr_zone, -geoid))))
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(dplyr::select(pr_zone, -geoid))))
ggplot() +
geom_sf(data = x, aes(fill = get(n2)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR (mm)")
data = pr_zone %>%
slice_max(rowSums(dplyr::select(., -geoid))) %>%
tidyr::pivot_longer(-geoid, names_to = "day", values_to = "prcp") %>%
mutate(day = as.numeric(gsub("V","", day)))
head(data)
ggplot(data, aes(x = day, y = prcp))  +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
rcl = read.csv("modis_lc.csv") %>%
dplyr::select(from = Class, to = short)
library(zonal)
library(sf)
library(dplyr)
library(ggplot2)
file <- 'pr_2020.nc'
AOI  <- AOI::aoi_get(state = "south", county = "all")
system.time({
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
library(tidyr)
rcompendium::add_dependencies()
rcompendium::add_dependencies_badge()
rcompendium::get_all_dependencies()
rcompendium::get_all_dependencies()
knitr::knit("README.Rmd")
rcompendium::get_all_dependencies()
rcompendium::get_all_dependencies
library(renv)
renv::dependencies()
renv::dependencies()
#rcompendium::get_all_dependencies()
renv::dependencies() %>%
filter(!grepl("README", Source))
#rcompendium::get_all_dependencies()
renv::dependencies() %>%
filter(!grepl("README", Source)) %>%
distinct(Package)
#rcompendium::get_all_dependencies()
renv::dependencies() %>%
filter(!grepl("README|pkgdown", Source)) %>%
distinct(Package)
renv::dependencies() %>%
filter(!grepl("README|pkgdown", Source))
#rcompendium::get_all_dependencies()
renv::dependencies() %>%
filter(!grepl("README|pkgdown|vignettes", Source)) %>%
distinct(Package)
lapply(renv::dependencies('data.table'))
renv::dependencies('data.table')
rcompendium::get_all_dependencies('.')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%",
warning = FALSE,
message = FALSE
)
library(zonal)
library(dplyr)
library(tidyr)
library(ggplot2)
file <- 'to_build/pr_2020.nc'
AOI  <- AOI::aoi_get(state = "south", county = "all")
system.time({
# Build Weight Grid
w        = weighting_grid(file, AOI, "geoid")
# Intersect
pr_zone = execute_zonal(file, w = w)
})
# PET zone: Counties, time slices/ID
dim(pr_zone)
x = merge(AOI, pr_zone)
# Plot Day with the maximum single county max rainfall.
n = colnames(pr_zone)[which(pr_zone[,-1] == max(pr_zone[,-1]), arr.ind = TRUE)[2] + 1]
ggplot() +
geom_sf(data = x, aes(fill = get(n)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR (mm)")
# Plot Day with the maximum county wide rainfall
n2 = names(which.max(colSums(dplyr::select(pr_zone, -geoid))))
ggplot() +
geom_sf(data = x, aes(fill = get(n2)), color = NA) +
scale_fill_viridis_c() +
theme_void() +
labs(fill = "PR (mm)")
data = pr_zone %>%
slice_max(rowSums(select(., -geoid))) %>%
pivot_longer(-geoid, names_to = "day", values_to = "prcp") %>%
mutate(day = as.numeric(gsub("V","", day)))
head(data)
ggplot(data, aes(x = day, y = prcp))  +
geom_line() +
labs(x = "Date", y = "Mean Rainfall",
title = paste("GEOID: ", data$geoid[1])) +
theme_bw()
file = 'to_build/2019-01-01.tif'
rcl = read.csv("to_build//modis_lc.csv") %>%
select(from = Class, to = short)
system.time({
lc = execute_zonal_cat(file, AOI, "geoid", rcl = rcl)
})
to_plot = merge(AOI, lc)
ggplot(to_plot) +
geom_sf(aes(fill = percentage), color = "transparent") +
scale_fill_gradient2() +
geom_sf(data = sf::st_union(AOI), fill = "transparent") +
facet_wrap(~value) +
theme_void() +
theme(legend.position = "bottom")
rcompendium::get_all_dependencies()
# rcompendium::add_dependencies()
# rcompendium::add_dependencies_badge()
# rcompendium::add_r_depend()
knitr::knit("README.Rmd")
library(knitr)
fs::file_copy("to_build/01_weight_creation.Rmd", 'vignettes/01_weight_creation.Rmd.orig', overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
library(exactextractr)
fs::file_copy("to_build/01_weight_creation.Rmd", 'vignettes/01_weight_creation.Rmd.orig', overwrite = TRUE)
fs::file_copy("to_build/01_weight_creation.Rmd", 'vignettes/01_weight_creation.Rmd.orig', overwrite = TRUE)
getwd()
fs::file_copy("to_build/01_weight_creation.Rmd",
'vignettes/01_weight_creation.Rmd.orig',
overwrite = TRUE)
getwd()
fs::file_copy("../to_build/01_weight_creation.Rmd",
'01_weight_creation.Rmd.orig',
overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
library(knitr)
fs::file_copy("../to_build/01_weight_creation.Rmd",
'01_weight_creation.Rmd.orig',
overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
getwd()
getwd()
devtools::load_all("~/github/zonal")
getwd()
devtools::load_all("~/github/zonal")
getwd()
