library(dplyr)
library(sf)
library(terra)
knitr::opts_chunk$set(
out.width = "100%",
message = FALSE, warning = FALSE, error = FALSE
)
library(intersectr)
library(ncmeta)
library(RNetCDF)
intersectr_weights = function(file, geom, ID, var){
nc_coord_vars <- nc_coord_var(file)
variable_name <- var
nc_coord_vars <- filter(nc_coord_vars, variable == variable_name)
nc       <- open.nc(file)
X_coords <- var.get.nc(nc, nc_coord_vars$X, unpack = TRUE)
Y_coords <- var.get.nc(nc, nc_coord_vars$Y, unpack = TRUE)
nc_prj <- nc_gm_to_prj(nc_grid_mapping_atts(file))
cell_geometry = create_cell_geometry(X_coords = X_coords,
Y_coords = Y_coords,
prj = nc_prj,
geom = geom,
buffer_dist = 0.1, # Degrees
regularize = TRUE)
data_source_cells <- st_sf(dplyr::select(cell_geometry, grid_ids))
target_polygons   <- st_sf(dplyr::select(geom, !!ID))
st_agr(data_source_cells) <- "constant"
st_agr(target_polygons)   <- "constant"
calculate_area_intersection_weights(
data_source_cells,
target_polygons, allow_lonlat = TRUE)
}
library(zonal)
file = '/Users/mjohnson/Downloads/pet_1979.nc'
(s = terra::rast(file))
r    = suppressWarnings({ terra::rast(file)[[1]] })
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols[]      = (rep(1:y.dim, each = x.dim))
names(cols) = 'Y'
rows[]      = (rep(1:x.dim, times = y.dim))
if(grepl("raster|character", class(file), ignore.case = TRUE)){ file = file[[1]] }
r    = suppressWarnings({ terra::rast(file)[[1]] })
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols[]      = (rep(1:y.dim, each = x.dim))
names(cols) = 'Y'
rows[]      = (rep(1:x.dim, times = y.dim))
names(rows) = 'X'
a = st_transform(geom, st_crs(r)) %>%
st_bbox()
ext = terra::ext(c(a$xmin, a$xmax, a$ymin, a$ymax))
a = st_transform(geom, st_crs(r)) %>%
st_bbox()
library(sf)
a = st_transform(geom, st_crs(r)) %>%
st_bbox()
a
geom
geom <- st_make_valid(read_sf('/Users/mjohnson/github/hydrofabric/workflow/nhd_workflows/cache/ngen_01a-4.gpkg', "catchments"))
dplyr::glimpse(geom)
if(grepl("raster|character", class(file), ignore.case = TRUE)){ file = file[[1]] }
r    = suppressWarnings({ terra::rast(file)[[1]] })
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols[]      = (rep(1:y.dim, each = x.dim))
names(cols) = 'Y'
rows[]      = (rep(1:x.dim, times = y.dim))
names(rows) = 'X'
a = st_transform(geom, st_crs(r)) %>%
st_bbox()
ext = terra::ext(c(a$xmin, a$xmax, a$ymin, a$ymax))
st =  terra::crop(terra::rast(list(cols, rows)),
terra::ext(c(a$xmin, a$xmax, a$ymin, a$ymax)))
if(grepl("raster|character", class(file), ignore.case = TRUE)){ file = file[[1]] }
r    = suppressWarnings({ terra::rast(file)[[1]] })
y.dim = dim(r)[1]
x.dim = dim(r)[2]
cols <- rows <- r[[1]]
cols[]      = (rep(1:y.dim, each = x.dim))
names(cols) = 'Y'
rows[]      = (rep(1:x.dim, times = y.dim))
names(rows) = 'X'
st =  terra::crop(terra::rast(list(cols, rows)),
terra::project(terra::vect(geom), terra::crs(r)))
cells        = s[[1]]
names(cells) = 'grid_id'
cells[] = 1:terra::ncell(cells)
s       = terra::rast(list(s, cells))
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = progress) })
s
plot(s)
s
st =  terra::crop(terra::rast(list(cols, rows)),
terra::project(terra::vect(geom), terra::crs(r)))
cells        = st[[1]]
cells
names(cells) = 'grid_id'
cells[] = 1:terra::ncell(cells)
s       = terra::rast(list(st, cells))
s
plot(s)
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = progress) })
out1 = suppressWarnings({ exactextractr::exact_extract(raster::stack(s),
geom,
progress = FALSE) })
out2 = data.table::rbindlist(out1)
out2[,(ID) := rep(geom[[ID]], times = sapply(out1, nrow))]
ID = "comid"
out2 = data.table::rbindlist(out1)
out2[,(ID) := rep(geom[[ID]], times = sapply(out1, nrow))]
setnames(out2, "coverage_fraction", "w")
devtools::load_all(".")
?terra::buffer()
vect = terra::project(terra::vect(geom), terra::crs(r))
vect
?terra::buffer
terra::bbox()
vect = terra::project(terra::vect(terra::bbox(geom)), terra::crs(r))
terra::bbox(geom)
vect = terra::project(terra::bbox(terra::vect(geom)), terra::crs(r))
vect = terra::project(terra::vect(geom)), terra::crs(r))
vect = terra::project(terra::vect(geom), terra::crs(r))
vect
terra::bbox(vect)
terra::ext(vect)
ext = terra::ext(terra::ext(vect))
terra::buffer(ext, 1)
ext$xmin
c(ext$xmin, ext$xmax, ext$ymin, ext$ymax)
terra::res(r)
res = terra::res(r)[1]
ext = c(ext$xmin - res, ext$xmax + res, ext$ymin - res, ext$ymax + res)
st =  terra::crop(terra::rast(list(cols, rows)), ext)
vect = terra::project(terra::vect(geom), terra::crs(r))
ext = terra::ext(terra::ext(vect))
res = terra::res(r)[1]
ext = c(ext$xmin - res, ext$xmax + res, ext$ymin - res, ext$ymax + res)
st =  terra::crop(terra::rast(list(cols, rows)), ext)
devtools::load_all(".")
# We are doing this because terra snap out often crashes R!
vect = terra::project(terra::vect(geom), terra::crs(r))
ext = terra::ext(vect)
ext
res = terra::res(r)[1]
ext = c(ext$xmin - res, ext$xmax + res, ext$ymin - res, ext$ymax + res)
document()
devtools::document()
rm(list = c("ext"))
rm(list = c("ext"))
devtools::document()
rm(list = c("vect"))
devtools::document()
devtools::document()
devtools::document()
library(zonal)
library(dplyr)
library(sf)
library(terra)
knitr::opts_chunk$set(
out.width = "100%",
message = FALSE, warning = FALSE, error = FALSE
)
library(intersectr)
library(ncmeta)
library(RNetCDF)
intersectr_weights = function(file, geom, ID, var){
nc_coord_vars <- nc_coord_var(file)
variable_name <- var
nc_coord_vars <- filter(nc_coord_vars, variable == variable_name)
nc       <- open.nc(file)
X_coords <- var.get.nc(nc, nc_coord_vars$X, unpack = TRUE)
Y_coords <- var.get.nc(nc, nc_coord_vars$Y, unpack = TRUE)
nc_prj <- nc_gm_to_prj(nc_grid_mapping_atts(file))
cell_geometry = create_cell_geometry(X_coords = X_coords,
Y_coords = Y_coords,
prj = nc_prj,
geom = geom,
buffer_dist = 0.1, # Degrees
regularize = TRUE)
data_source_cells <- st_sf(dplyr::select(cell_geometry, grid_ids))
target_polygons   <- st_sf(dplyr::select(geom, !!ID))
st_agr(data_source_cells) <- "constant"
st_agr(target_polygons)   <- "constant"
calculate_area_intersection_weights(
data_source_cells,
target_polygons, allow_lonlat = TRUE)
}
library(zonal)
file = '/Users/mjohnson/Downloads/pet_1979.nc'
(s = terra::rast(file))
geom <- st_make_valid(read_sf('/Users/mjohnson/github/hydrofabric/workflow/nhd_workflows/cache/ngen_01a-4.gpkg', "catchments"))
dplyr::glimpse(geom)
geom
zonal      = weighting_grid(s, geom, "comid")
zonal
zonal
fs::file_copy("inst/01_weight_creation.Rmd",
'vignettes/01_weight_creation.Rmd.orig',
overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
library(knitr)
fs::file_copy("inst/01_weight_creation.Rmd",
'vignettes/01_weight_creation.Rmd.orig',
overwrite = TRUE)
knit("vignettes/01_weight_creation.Rmd.orig", "vignettes/01_weight_creation.Rmd")
